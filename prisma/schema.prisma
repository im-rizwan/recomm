generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum AccessType {
    // public level
    subscriber // allow to sell and buy products
    retailer // allow to sell and buy products in large quantity

    // admin level
    readAccess // allow to view admin page

    createCategory // allow to create category
    updateCategory // allow to update category
    deleteCategory // allow to delete category

    createBrand // allow to create brand
    updateBrand // allow to update brand
    deleteBrand // allow to delete brand

    createModel // allow to create model
    updateModel // allow to update model
    deleteModel // allow to delete model

    updateProduct // allow to update product
    deleteProduct // allow to delete product

    createRole // allow to create role
    updateRole // allow to update role
    updateUsersRole // allow to update role of user
    deleteRole // allow to delete role

    updateUser // allow to update user
    deleteUser // allow to delete user
}

model Access {
    type AccessType @id
    Role Role[]
}

model Role {
    id       String   @id @default(cuid())
    name     String   @unique
    accesses Access[]
    user     User[]

    @@index([name])
}

model User {
    id                String    @id @default(cuid())
    name              String?
    email             String?   @unique
    emailVerified     DateTime?
    image             String?
    lastActive        DateTime?
    accounts          Account[]
    sessions          Session[]
    listedProducts    Product[] @relation("listedProducts")
    purchasedProducts Product[] @relation("purchasedProducts")
    favoriteProducts  Product[] @relation("favoriteProducts")
    wishes            Wish[]
    bids              Bid[]
    role              Role?     @relation(fields: [roleId], references: [id], onDelete: SetNull)
    roleId            String?
    // location
    latitude          Float?
    longitude         Float?
    // meta
    createdAt         DateTime  @default(now())
    updatedAt         DateTime  @updatedAt

    // admin level
    createdCategories  Category[]
    FeaturedCategories FeaturedCategory[]
    createdBrands      Brand[]
    createdModels      Model[]

    @@index([roleId])
}

enum State {
    Andhra_Pradesh
    Arunachal_Pradesh
    Assam
    Bihar
    Chhattisgarh
    Goa
    Gujarat
    Haryana
    Himachal_Pradesh
    Jharkhand
    Karnataka
    Kerala
    Madhya_Pradesh
    Maharashtra
    Manipur
    Meghalaya
    Mizoram
    Nagaland
    Odisha
    Punjab
    Rajasthan
    Sikkim
    Tamil_Nadu
    Telangana
    Tripura
    Uttar_Pradesh
    Uttarakhand
    West_Bengal
}

model Category {
    id               String            @id @default(cuid())
    name             String            @unique
    slug             String            @unique
    active           Boolean           @default(true)
    subCategories    Category[]        @relation("SubCategory")
    parentCategory   Category?         @relation("SubCategory", fields: [parentCategoryId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    parentCategoryId String?
    wishes           Wish[]
    models           Model[]
    featuredCategory FeaturedCategory?

    // Meta
    createdBy    User     @relation(fields: [createdById], references: [id])
    createdById  String
    createdState State
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt

    @@unique([name, parentCategoryId])
    @@index([parentCategoryId])
    @@index([createdById])
}

model FeaturedCategory {
    category   Category @relation(fields: [categoryId], references: [id])
    categoryId String   @unique
    image      Image    @relation(fields: [imageId], references: [publicId])
    imageId    String   @unique

    // Meta
    featuredBy   User     @relation(fields: [featuredById], references: [id])
    featuredById String
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt

    @@index([featuredById])
}

model Brand {
    id     String  @id @default(cuid())
    name   String  @unique
    slug   String  @unique
    active Boolean @default(true)
    models Model[]
    wishes Wish[]

    // Meta
    createdBy    User     @relation(fields: [createdById], references: [id])
    createdById  String
    createdState State
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt

    @@index([createdById])
}

model Model {
    id                      String                   @id @default(cuid())
    name                    String                   @unique
    slug                    String                   @unique
    active                  Boolean                  @default(true)
    category                Category                 @relation(fields: [categoryId], references: [id])
    categoryId              String
    brand                   Brand                    @relation(fields: [brandId], references: [id], onDelete: Restrict)
    brandId                 String
    products                Product[]
    wishes                  Wish[]
    multipleChoiceQuestions MultipleChoiceQuestion[]
    choices                 Choice[]
    atomicQuestions         AtomicQuestion[]
    answers                 AtomicAnswer[]

    // Meta
    createdBy    User     @relation(fields: [createdById], references: [id])
    createdById  String
    createdState State
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt

    @@unique([createdById])
    @@index([brandId])
    @@index([categoryId])
}

enum MultipleChoiceQuestionType {
    Dropdown
    RadioGroup
    Checkbox
    Variant
}

model MultipleChoiceQuestion {
    id              String                     @id @default(cuid())
    questionContent String
    choices         Choice[]
    type            MultipleChoiceQuestionType
    required        Boolean                    @default(true)
    model           Model                      @relation(fields: [modelId], references: [id], onDelete: Cascade)
    modelId         String

    // Meta
    updatedAt DateTime @updatedAt

    @@unique([questionContent, modelId])
    @@index([modelId])
}

model Choice {
    id         String                 @id @default(cuid())
    value      String
    question   MultipleChoiceQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
    questionId String
    model      Model                  @relation(fields: [modelId], references: [id], onDelete: Cascade)
    modelId    String
    products   Product[]

    // Meta
    updatedAt DateTime @updatedAt

    @@unique([value, questionId, modelId])
    @@index([questionId])
    @@index([modelId])
}

enum AtomicQuestionType {
    Text
    Paragraph
    Number
    Date
}

model AtomicQuestion {
    id              String             @id @default(cuid())
    questionContent String
    type            AtomicQuestionType
    required        Boolean            @default(true)
    answers         AtomicAnswer[]
    model           Model              @relation(fields: [modelId], references: [id], onDelete: Cascade)
    modelId         String

    // Meta
    updatedAt DateTime @updatedAt

    @@index([modelId])
}

model AtomicAnswer {
    id            String         @id @default(cuid())
    answerContent String
    question      AtomicQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
    questionId    String
    product       Product        @relation(fields: [productId], references: [id], onDelete: Cascade)
    productId     String
    model         Model          @relation(fields: [modelId], references: [id], onDelete: Cascade)
    modelId       String

    // Meta
    updatedAt DateTime @updatedAt

    @@index([productId])
    @@index([questionId])
    @@index([modelId])
}

model Product {
    id              String         @id @default(cuid())
    price           Float
    title           String
    slug            String         @unique
    active          Boolean        @default(true)
    description     String
    images          Image[]
    selectedChoices Choice[]
    answers         AtomicAnswer[]
    model           Model          @relation(fields: [modelId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    modelId         String
    seller          User           @relation("listedProducts", fields: [sellerId], references: [id], onDelete: Cascade)
    sellerId        String
    buyer           User?          @relation("purchasedProducts", fields: [buyerId], references: [id], onDelete: SetNull)
    buyerId         String?
    favoritedUsers  User[]         @relation("favoriteProducts")
    room            Room           @relation(fields: [roomId], references: [id], onDelete: Restrict)
    roomId          String         @unique

    // Meta
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([sellerId])
    @@index([modelId])
    @@index([buyerId])
}

model Room {
    id      String   @id @default(cuid())
    bids    Bid[]
    product Product?

    // Meta
    closedAt  DateTime
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Bid {
    id     String @id @default(cuid())
    price  Float
    user   User   @relation(fields: [userId], references: [id], onDelete: Restrict)
    userId String
    room   Room   @relation(fields: [roomId], references: [id], onDelete: Cascade)
    roomId String

    // Meta
    createdAt DateTime @default(now())

    @@index([userId])
    @@index([roomId])
}

enum WishStatus {
    pending
    available
}

model Wish {
    id         String     @id @default(cuid())
    lowerBound Float
    upperBound Float
    category   Category?  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
    categoryId String?
    brand      Brand?     @relation(fields: [brandId], references: [id], onDelete: Cascade)
    brandId    String?
    model      Model?     @relation(fields: [modelId], references: [id], onDelete: Cascade)
    modelId    String?
    status     WishStatus @default(pending)
    user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId     String

    // Meta
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([userId])
    @@index([categoryId])
    @@index([brandId])
    @@index([modelId])
}

model Image {
    publicId         String            @id
    url              String
    secureUrl        String
    originalFilename String
    format           String
    width            Int
    height           Int
    resource_type    String // "image" | "video" | "raw" | "auto"
    category         FeaturedCategory?
    product          Product?          @relation(fields: [productId], references: [id], onDelete: Cascade)
    productId        String?

    @@index([productId])
}
