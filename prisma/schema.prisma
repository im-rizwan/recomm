generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum Role {
    DELETE
    UPDATE
    CREATE
    READ
    USER
}

model User {
    id                String    @id @default(cuid())
    name              String?
    email             String?   @unique
    emailVerified     DateTime?
    image             String?
    lastActive        DateTime?
    accounts          Account[]
    sessions          Session[]
    listedProducts    Product[] @relation("listedProducts")
    purchasedProducts Product[] @relation("purchasedProducts")
    favoriteProducts  Product[] @relation("favoriteProducts")
    wishes            Wish[]
    bids              Bid[]
    role              Role?
    createdAt         DateTime  @default(now())
    updatedAt         DateTime  @updatedAt
}

model Category {
    id               String            @id @default(cuid())
    name             String            @unique
    slug             String
    image            Image?            @relation(fields: [imageId], references: [id], onDelete: SetNull)
    imageId          String?           @unique
    active           Boolean           @default(true)
    subCategories    Category[]        @relation("SubCategory")
    parentCategory   Category?         @relation("SubCategory", fields: [parentCategoryId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    parentCategoryId String?
    models           Model[]
    createdAt        DateTime          @default(now())
    updatedAt        DateTime          @updatedAt
    featuredCategory FeaturedCategory?

    @@unique([name, parentCategoryId])
    @@index([parentCategoryId])
}

model FeaturedCategory {
    category   Category @relation(fields: [categoryId], references: [id])
    categoryId String   @unique
}

model Brand {
    id        String   @id @default(cuid())
    name      String   @unique
    slug      String
    image     Image?   @relation(fields: [imageId], references: [id], onDelete: SetNull)
    imageId   String?  @unique
    models    Model[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Model {
    id           String          @id @default(cuid())
    name         String          @unique
    slug         String
    image        Image?          @relation(fields: [imageId], references: [id], onDelete: SetNull)
    imageId      String?         @unique
    categories   Category[]
    brand        Brand           @relation(fields: [brandId], references: [id], onDelete: Restrict)
    brandId      String
    products     Product[]
    wishes       Wish[]
    options      Option[]
    optionValues OptionValue[]
    questions    ModelQuestion[]
    answers      ModelAnswer[]
    createdAt    DateTime        @default(now())
    updatedAt    DateTime        @updatedAt

    @@index([brandId])
}

enum OptionType {
    Dropdown
    Checkbox
    Variant
}

model Option {
    id        String        @id @default(cuid())
    name      String
    values    OptionValue[]
    type      OptionType
    required  Boolean       @default(true)
    model     Model         @relation(fields: [modelId], references: [id], onDelete: Cascade)
    modelId   String
    createdAt DateTime      @default(now())
    updatedAt DateTime      @updatedAt

    @@unique([name, modelId])
    @@index([modelId])
}

model OptionValue {
    id        String    @id @default(cuid())
    name      String
    option    Option    @relation(fields: [optionId], references: [id], onDelete: Cascade)
    optionId  String
    model     Model     @relation(fields: [modelId], references: [id], onDelete: Cascade)
    modelId   String
    products  Product[]
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt

    @@unique([name, optionId, modelId])
    @@index([optionId])
    @@index([modelId])
}

enum QuestionType {
    Text
    Paragraph
    Number
    Date
}

model ModelQuestion {
    id        String        @id @default(cuid())
    question  String
    type      QuestionType
    required  Boolean       @default(true)
    answers   ModelAnswer[]
    model     Model         @relation(fields: [modelId], references: [id], onDelete: Cascade)
    modelId   String
    createdAt DateTime      @default(now())
    updatedAt DateTime      @updatedAt

    @@index([modelId])
}

model ModelAnswer {
    id         String        @id @default(cuid())
    answer     String
    question   ModelQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
    questionId String
    product    Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
    productId  String
    model      Model         @relation(fields: [modelId], references: [id], onDelete: Cascade)
    modelId    String
    createdAt  DateTime      @default(now())
    updatedAt  DateTime      @updatedAt

    @@index([productId])
    @@index([questionId])
    @@index([modelId])
}

model Product {
    id             String        @id @default(cuid())
    price          Float
    title          String
    slug           String
    description    String
    images         Image[]
    optionValues   OptionValue[]
    answers        ModelAnswer[]
    model          Model         @relation(fields: [modelId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    modelId        String
    seller         User          @relation("listedProducts", fields: [sellerId], references: [id], onDelete: Cascade)
    sellerId       String
    buyer          User?         @relation("purchasedProducts", fields: [buyerId], references: [id], onDelete: SetNull)
    buyerId        String?
    favoritedUsers User[]        @relation("favoriteProducts")
    room           Room          @relation(fields: [roomId], references: [id], onDelete: Restrict)
    roomId         String        @unique
    createdAt      DateTime      @default(now())
    updatedAt      DateTime      @updatedAt

    @@index([sellerId])
    @@index([modelId])
    @@index([buyerId])
}

model Room {
    id        String   @id @default(cuid())
    bids      Bid[]
    product   Product?
    closedAt  DateTime
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Bid {
    id        String   @id @default(cuid())
    price     Float
    user      User     @relation(fields: [userId], references: [id], onDelete: Restrict)
    userId    String
    room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
    roomId    String
    createdAt DateTime @default(now())

    @@index([userId])
    @@index([roomId])
}

enum WishStatus {
    pending
    available
}

model Wish {
    id         String     @id @default(cuid())
    model      Model      @relation(fields: [modelId], references: [id], onDelete: Cascade)
    modelId    String
    lowerBound Float
    upperBound Float
    status     WishStatus @default(pending)
    user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId     String
    createdAt  DateTime   @default(now())
    updatedAt  DateTime   @updatedAt

    @@index([userId])
    @@index([modelId])
}

model Image {
    id        String    @id @default(cuid())
    publicId  String
    url       String
    fileType  String
    width     Int
    height    Int
    category  Category?
    model     Model?
    brand     Brand?
    product   Product?  @relation(fields: [productId], references: [id], onDelete: Cascade)
    productId String?
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt

    @@index([productId])
}
