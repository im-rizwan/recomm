generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model User {
    id                String    @id @default(cuid())
    name              String?
    email             String?   @unique
    emailVerified     DateTime?
    image             String?
    lastActive        DateTime?
    accounts          Account[]
    sessions          Session[]
    listedProducts    Product[] @relation("listedProducts")
    purchasedProducts Product[] @relation("purchasedProducts")
    favoriteProducts  Product[] @relation("favoriteProducts")
    wishes            Wish[]
    bids              Bid[]
    admin             Admin?
    createdAt         DateTime  @default(now())
    updatedAt         DateTime  @updatedAt
}

model Admin {
    id        String   @id @default(cuid())
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String   @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Category {
    id               String     @id @default(cuid())
    name             String     @unique
    image            Image      @relation(fields: [imageId], references: [id], onDelete: Cascade)
    imageId          String     @unique
    subCategories    Category[] @relation("SubCategory")
    parentCategory   Category?  @relation("SubCategory", fields: [parentCategoryId], references: [id], onDelete: Cascade)
    parentCategoryId String?
    models           Model[]
    createdAt        DateTime   @default(now())
    updatedAt        DateTime   @updatedAt

    @@unique([name, parentCategoryId])
    @@index([parentCategoryId])
}

model Brand {
    id        String   @id @default(cuid())
    name      String   @unique
    image     Image    @relation(fields: [imageId], references: [id], onDelete: Cascade)
    imageId   String   @unique
    models    Model[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Model {
    id             String          @id @default(cuid())
    name           String          @unique
    image          Image           @relation(fields: [imageId], references: [id], onDelete: Cascade)
    imageId        String          @unique
    category       Category        @relation(fields: [categoryId], references: [id], onDelete: Cascade)
    categoryId     String
    brand          Brand           @relation(fields: [brandId], references: [id], onDelete: Cascade)
    brandId        String
    products       Product[]
    wishes         Wish[]
    createdAt      DateTime        @default(now())
    updatedAt      DateTime        @updatedAt
    varientOptions VarientOption[]
    varientValues  VarientValue[]

    @@index([categoryId]) // to fetch all models by category
    @@index([brandId]) // to fetch all models by brand
}

model VarientOption {
    id            String         @id @default(cuid())
    name          String
    model         Model?         @relation(fields: [modelId], references: [id], onDelete: Cascade)
    modelId       String?
    varientValues VarientValue[]

    @@unique([name, modelId])
    @@index([modelId]) // to fetch all varient options by model
}

model VarientValue {
    id       String         @id @default(cuid())
    name     String
    option   VarientOption? @relation(fields: [optionId], references: [id], onDelete: Cascade)
    optionId String?
    model    Model?         @relation(fields: [modelId], references: [id], onDelete: Cascade)
    modelId  String?
    products Product[]

    @@unique([name, optionId, modelId])
    @@index([optionId]) // to fetch all varient values by varient option
}

model Product {
    id             String         @id @default(cuid())
    price          Float
    title          String
    description    String
    images         Image[]
    varientValues  VarientValue[]
    model          Model          @relation(fields: [modelId], references: [id], onDelete: Cascade)
    modelId        String
    seller         User           @relation("listedProducts", fields: [sellerId], references: [id], onDelete: Cascade)
    sellerId       String
    buyer          User?          @relation("purchasedProducts", fields: [buyerId], references: [id], onDelete: SetNull)
    buyerId        String?
    favoritedUsers User[]         @relation("favoriteProducts")
    room           Room           @relation(fields: [roomId], references: [id], onDelete: Cascade)
    roomId         String         @unique
    createdAt      DateTime       @default(now())
    updatedAt      DateTime       @updatedAt

    // @@index([buyerId]) // to fetch all products by buyer (not needed)(uncomment if needed)
    @@index([sellerId]) // to fetch all products by seller
    @@index([modelId]) // to fetch all products by model
}

model Room {
    id        String   @id @default(cuid())
    bids      Bid[]
    product   Product?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    closedAt  DateTime
}

model Bid {
    id        String   @id @default(cuid())
    price     Float
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String
    room      Room?    @relation(fields: [roomId], references: [id], onDelete: Cascade)
    roomId    String?
    createdAt DateTime @default(now())

    @@index([userId]) // to fetch all bids by user
    @@index([roomId]) // to fetch all bids by room
}

enum WishStatus {
    pending
    available
}

model Wish {
    id        String     @id @default(cuid())
    model     Model      @relation(fields: [modelId], references: [id], onDelete: Cascade)
    modelId   String
    status    WishStatus @default(pending)
    user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt

    @@index([userId]) // to fetch all wishes by user
}

model Image {
    id        String    @id @default(cuid())
    publicId  String
    url       String
    fileType  String
    width     Int
    height    Int
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    category  Category?
    model     Model?
    brand     Brand?
    product   Product?  @relation(fields: [productId], references: [id], onDelete: Cascade)
    productId String?

    @@index([productId]) // to fetch all images by product
}
